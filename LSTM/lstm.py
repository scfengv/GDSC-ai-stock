# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4soy--EofXHK_7oZgnk0bVigvZLl4jC
"""

import os
import warnings
import numpy as np
import pandas as pd
import yfinance as yf
from sklearn import metrics
import matplotlib.pyplot as plt
from keras.models import Sequential
from pandas_datareader import data as pdr
from keras.callbacks import EarlyStopping
from keras.layers import Dense, LSTM, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV, train_test_split

# Commented out IPython magic to ensure Python compatibility.
warnings.filterwarnings("ignore")
# %config InlineBackend.figure_format = 'retina'

from google.colab import drive
drive.mount('/content/drive')

os.chdir('/content/drive/MyDrive/GDSC AI Stock')

## Yahoo Finance for TSLA and VIX

yf.pdr_override()
df = pdr.get_data_yahoo("TSLA", start = "2015-01-01", end = "2023-12-31").reset_index()
vix = pdr.get_data_yahoo("^VIX", start = "2015-01-01", end = "2023-12-31").reset_index()

fin = pd.read_csv('./Financial Statement.csv')

df['Date'] = pd.to_datetime(df['Date'])
vix['Date'] = pd.to_datetime(vix['Date'])
fin['Date'] = pd.to_datetime(fin['Date'])

df.drop(columns = ['Adj Close'], inplace = True)
vix = vix[['Date', 'Close']]
fin = fin[['Date', 'Gross Margin (YoY%)', 'Operating Margin (YoY%)', 'Quick Ratio (YoY%)', 'EPS Growth (USD)']]
df['Delta'] = round(df['Close'].pct_change()*100, 4)
df.dropna(inplace = True)

df = pd.merge(left = df, right = vix, left_on = 'Date', right_on = 'Date', suffixes = ('_TSLA', '_VIX'), how = 'left')
df = pd.merge(left = df, right = fin, left_on = 'Date', right_on = 'Date', how = 'left')
df.set_index('Date', inplace = True)

def custom_ffill(series):

    previous_value = None
    day = 0

    for i, value in series.items():

        if pd.isna(value):
            day += 1
            if previous_value is not None:

                series[i] = previous_value / 2
                previous_value = previous_value / 2

                # if abs(previous_value) <= float(1e-4):
                if day > 14:
                    previous_value = 0
        else:
            previous_value = value
            day = 0

    return series

for c in df:
    df[c] = custom_ffill(df[c])

df.dropna(inplace = True)
df.reset_index(inplace = True)

df['Open_Close'] = 0.0
df['High_Low'] = 0.0

for i in range(len(df)):
    df['Open_Close'][i] = (df['Open'][i] - df['Close_TSLA'][i]) * 100 / df['Open'][i]
    df['High_Low'][i] = (df['High'][i] - df['Low'][i]) * 100 / df['Low'][i]

df['Target'] = df['Close_TSLA'].shift(-1)
df.dropna(inplace = True)

features = df[["Close_TSLA", "Volume", "Close_VIX", "Gross Margin (YoY%)", "Operating Margin (YoY%)", "Quick Ratio (YoY%)", "EPS Growth (USD)", "Open_Close", "High_Low"]]
target = df['Target']

features

scaler = MinMaxScaler()
features_scaled = scaler.fit_transform(features)
target_scaled = scaler.fit_transform(target.values.reshape(-1, 1))

num_train = int(len(features_scaled) * 0.9)

x_train = features_scaled[:num_train]
x_test = features_scaled[num_train:]

y_train = target_scaled[:num_train]
y_test = target_scaled[num_train:]

x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]))
x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]))

x_train.shape, x_test.shape

model = Sequential()
model.add(LSTM(128, return_sequences = True, input_shape = (x_train.shape[1], x_train.shape[2])))
model.add(LSTM(64, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss = 'mean_squared_error',optimizer = 'adam')

history = model.fit(x_train, y_train, batch_size = 8, epochs = 10)

loss = model.evaluate(x_test, y_test)
print(f'Mean Squared Error on Test Data: {round(loss, 4)}')

x_new = np.reshape(features_scaled[-1], (1, 1, features_scaled.shape[1]))
predicted_scaled = model.predict(x_new)
predicted = scaler.inverse_transform(predicted_scaled)
print(f'Predicted Close_TSLA for the next day: {predicted[0][0]}')

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

train = df[['Close_TSLA']][:num_train]
valid = df[['Close_TSLA']][num_train:]
valid['Predictions'] = predictions

plt.figure(figsize = (16,6))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD ($)', fontsize = 18)
# plt.plot(train['Close_TSLA'])
plt.plot(valid[['Close_TSLA', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc = 'lower right')
plt.show()

